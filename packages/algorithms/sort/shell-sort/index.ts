/**
 * 希尔排序 - 优化的插入排序
 *
 * 算法使用插入排序的方式对子数组进行排序。
 * 插入排序是通过比较相邻元素并交换位置来实现的。在希尔排序中，相邻元素的比较不仅限于相邻位置，而是间隔为 gap 的元素进行比较和交换。
 * 通过不断缩小间隔并进行插入排序，希尔排序可以大幅度减少需要交换的元素次数，从而提高排序的效率。
 *
 * @example
 * ```
 * 前提: 未优化的插入排序 + 希尔排序
 *
 * [8, 3, 2, 7, 4, 6, 1, 5]
 * gap = 4, [8, 4] [3, 6], [2, 1] [7, 5] => [4, 8] [3, 6] [1, 2] [5, 7] => [4, 3, 1, 5, 8, 6, 2, 7], 交换 3
 * gap = 2, [4, 1, 8, 2] [3, 5, 6, 7] => [1, 2, 4, 8], [3, 5, 6, 7] => [1, 3, 2, 5, 4, 6, 8, 7], 交换 3
 * gap = 1, 即插入排序, 交换 3
 * 总共 9 次
 *
 * 插入排序, 总共交换 17 次
 * [8 3 2 7 4 6 1 5] -> [3 8 2 7 4 6 1 5]: 1
 * -> [2 3 8 7 4 6 1 5]: 2
 * -> [2 3 7 8 4 6 1 5]: 1
 * -> [2 3 4 7 8 6 1 5]: 2
 * -> [2 3 4 6 7 8 1 5]: 2
 * -> [1 2 3 4 6 7 8 5]: 6
 * -> [1 2 3 4 5 6 7 8]: 3
 * ```
 */

export function shellSort(arr: number[]) {
  let gap = Math.floor(arr.length / 2);

  while (gap > 0) {
    for (let i = gap; i < arr.length; i++) {
      for (let j = i; j >= gap; j -= gap) {
        if (arr[j] >= arr[j - gap]) {
          break;
        }
        [arr[j], arr[j - gap]] = [arr[j - gap], arr[j]];
      }
    }

    gap = Math.floor(gap / 2);
  }

  return arr;
}
